// Service x·ª≠ l√Ω logic broadcast ƒë∆°n gi·∫£n
const { pool } = require('../config/database');
const ExternalApiService = require('./externalApiService');
const { getOrCreateChannel, addMessage } = require('./dbService');

class BroadcastService {
    constructor(io) {
        this.io = io; // Th√™m io instance
    }

    // L·∫•y danh s√°ch ph√≤ng ban t·ª´ API
    static async getDepartments() {
        try {
            return await ExternalApiService.getAllDepartments();
        } catch (error) {
            console.error('Error getting departments:', error);
            return [];
        }
    }

    // L·∫•y danh s√°ch nh√¢n vi√™n t·ª´ API
    static async getEmployees(departmentId = null) {
        try {
            return await ExternalApiService.getAllEmployees(departmentId);
        } catch (error) {
            console.error('Error getting employees:', error);
            return [];
        }
    }

    // G·ª≠i broadcast message - S·ª¨A PH∆Ø∆†NG TH·ª®C N√ÄY
    async sendBroadcastMessage(messageData) {
        const { content, type, targetType, targetDepartmentId } = messageData;
        
        try {
            // 1. L·∫•y danh s√°ch nh√¢n vi√™n c·∫ßn g·ª≠i
            let employees;
            if (targetType === 'all_employees') {
                employees = await BroadcastService.getEmployees();
            } else {
                employees = await BroadcastService.getEmployees(targetDepartmentId);
            }

            if (employees.length === 0) {
                throw new Error('Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë·ªÉ g·ª≠i tin nh·∫Øn');
            }

            console.log(`üì¢ Broadcasting to ${employees.length} employees`);

            // 2. G·ª≠i cho t·∫•t c·∫£ employees
            const results = [];
            
            for (const employee of employees) {
                const username = employee.username;
                
                try {
                    // T·∫°o ho·∫∑c l·∫•y channel
                    const channel = await getOrCreateChannel(username);

                    // T·∫°o message data
                    const messageData = {
                        channelId: channel.channel_id,
                        sender: 'admin',
                        type: type,
                        content: content,
                        timestamp: new Date().toISOString()
                        // user_read_at = NULL (m·∫∑c ƒë·ªãnh) = unread
                    };

                    // L∆∞u v√†o database
                    const savedMessage = await addMessage(messageData);

                    // B·∫Øn v√†o socket cho username n√†y
                    this.io.to(username).emit('chat:message', savedMessage);

                    results.push({
                        username,
                        messageId: savedMessage.message_id,
                        saved: true,
                        socketSent: true
                    });

                    console.log(`‚úÖ Sent to ${username} (saved to DB + socket broadcast)`);

                } catch (error) {
                    console.error(`‚ùå Error sending to ${username}:`, error);
                    results.push({
                        username,
                        error: error.message,
                        saved: false,
                        socketSent: false
                    });
                }
            }

            // 3. T·ªïng h·ª£p k·∫øt qu·∫£
            const totalSent = results.length;
            const successCount = results.filter(r => r.saved).length;
            const failedCount = results.filter(r => !r.saved).length;

            return {
                success: true,
                message: `ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi ${totalSent} nh√¢n vi√™n (${successCount} th√†nh c√¥ng, ${failedCount} th·∫•t b·∫°i)`,
                sentCount: totalSent,
                successCount,
                failedCount,
                results: results
            };

        } catch (error) {
            console.error('Error sending broadcast:', error);
            throw error;
        }
    }

    // B·ªé PH∆Ø∆†NG TH·ª®C getBroadcastHistory() - Kh√¥ng c·∫ßn n·ªØa

    // B·ªé PH∆Ø∆†NG TH·ª®C getBroadcastStats() - Kh√¥ng c·∫ßn n·ªØa
}

module.exports = BroadcastService;
